# -- Rule engine initialization ----------------------------------------------

# Enable Coraza, attaching it to every transaction. Use detection
# only to start with, because that minimises the chances of post-installation
# disruption.
#
SecRuleEngine On


# -- Request body handling ---------------------------------------------------

# Allow Coraza to access request bodies. If you don't, Coraza
# won't be able to see any POST parameters, which opens a large security
# hole for attackers to exploit.
#
SecRequestBodyAccess On

# Enable XML request body parser.
# Initiate XML Processor in case of xml content-type
#
SecRule REQUEST_HEADERS:Content-Type "^(?:application(?:/soap\+|/)|text/)xml" \
     "id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML"

# Enable JSON request body parser.
# Initiate JSON Processor in case of JSON content-type; change accordingly
# if your application does not use 'application/json'
#
SecRule REQUEST_HEADERS:Content-Type "^application/json" \
     "id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"

# Enable JSON request body parser for more subtypes.
# Adapt this rule if you want to engage the JSON Processor for "+json" subtypes
#
SecRule REQUEST_HEADERS:Content-Type "^application/[a-z0-9.-]+[+]json" \
     "id:'200006',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON"

# Maximum request body size we will accept for buffering. If you support
# file uploads, this value must has to be as large as the largest file
# you are willing to accept.
SecRequestBodyLimit 8388608

# Maximum request body size that Coraza will store in memory. If the body
# size exceeds this value, it will be saved to a temporary file on disk.
SecRequestBodyInMemoryLimit 131072

# Maximum request body size we will accept for buffering, with files excluded.
# You want to keep that value as low as practical.
# Note: SecRequestBodyNoFilesLimit is currently NOT supported by Coraza
# SecRequestBodyNoFilesLimit 131072

# What to do if the request body size is above our configured limit.
# Keep in mind that this setting will automatically be set to ProcessPartial
# when SecRuleEngine is set to DetectionOnly mode in order to minimize
# disruptions when initially deploying Coraza.
# Warning: Setting this directive to ProcessPartial introduces a potential bypass
# risk, as attackers could prepend junk data equal to or greater than the inspected body size.
#
SecRequestBodyLimitAction Reject

# Verify that we've correctly processed the request body.
# As a rule of thumb, when failing to process a request body
# you should reject the request (when deployed in blocking mode)
# or log a high-severity alert (when deployed in detection-only mode).
#
SecRule REQBODY_ERROR "!@eq 0" \
    "id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"

# By default be strict with what we accept in the multipart/form-data
# request body. If the rule below proves to be too strict for your
# environment consider changing it to detection-only.
# Do NOT remove it, as it will catch many evasion attempts.
#
SecRule MULTIPART_STRICT_ERROR "!@eq 0" \
    "id:'200003',phase:2,t:none,log,deny,status:400, \
    msg:'Multipart request body failed strict validation."

# -- Response body handling --------------------------------------------------

# Allow Coraza to access response bodies. 
# You should have this directive enabled in order to identify errors
# and data leakage issues.
# 
# Do keep in mind that enabling this directive does increases both
# memory consumption and response latency.
#
SecResponseBodyAccess On

# Which response MIME types do you want to inspect? You should adjust the
# configuration below to catch documents but avoid static files
# (e.g., images and archives).
#
SecResponseBodyMimeType text/plain text/html text/xml

# Buffer response bodies of up to 512 KB in length.
SecResponseBodyLimit 524288

# What happens when we encounter a response body larger than the configured
# limit? By default, we process what we have and let the rest through.
# That's somewhat less secure, but does not break any legitimate pages.
#
SecResponseBodyLimitAction ProcessPartial


# -- Filesystem configuration ------------------------------------------------

# The location where Coraza will keep its persistent data. This default setting 
# is chosen due to all systems have /tmp available however, it
# too should be updated to a place that other users can't access.
#
SecDataDir /tmp/


# -- File uploads handling configuration -------------------------------------

# The location where Coraza stores intercepted uploaded files. This
# location must be private to Coraza. You don't want other users on
# the server to access the files, do you?
#
#SecUploadDir /opt/coraza/var/upload/

# If On, the WAF will store the uploaded files in the SecUploadDir
# directory.
# Note: SecUploadKeepFiles is currently NOT supported by Coraza
#
#SecUploadKeepFiles Off

# Uploaded files are by default created with permissions that do not allow
# any other user to access them. You may need to relax that if you want to
# interface Coraza to an external program (e.g., an anti-virus).
# Note: SecUploadFileMode is currently NOT supported by Coraza
#
#SecUploadFileMode 0600


# -- Debug log configuration -------------------------------------------------

# Default debug log path
# Debug levels:
# 0:   No logging (least verbose)
# 1:   Error
# 2:   Warn
# 3:   Info
# 4-8: Debug
# 9:   Trace (most verbose)
# 
#SecDebugLog /opt/coraza/var/log/debug.log
#SecDebugLogLevel 3


# -- Audit log configuration -------------------------------------------------

# Log the transactions that are marked by a rule, as well as those that
# trigger a server error (determined by a 5xx or 4xx, excluding 404,  
# level response status codes).
#
SecAuditEngine RelevantOnly
SecAuditLogRelevantStatus "^(?:(5|4)(0|1)[0-9])$"

# Define which parts of the transaction are going to be recorded in the audit log
SecAuditLogParts ABIJDEFHZ

# Use a single file for logging. This is much easier to look at, but
# assumes that you will use the audit log only occasionally.
#
SecAuditLogType Serial

# The format used to write the audit log.
# Can be one of JSON|JsonLegacy|Native|OCSF
SecAuditLogFormat Native

# The following settings are not supported by Coraza
# SecCookieFormat 0
# SecArgumentSeparator &
# SecRule MULTIPART_UNMATCHED_BOUNDARY "@eq 1" \
#    "id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'"
# SecRule TX:/^COR_/ "!@streq 0" \
#       "id:'200005',phase:2,t:none,deny,msg:'Coraza internal error flagged: %{MATCHED_VAR_NAME}'"



# SecRule REQUEST_HEADERS:X-JA4 "@pmFromFile rules/ja4_blacklist.txt" \
#     "id:1002,phase:1,deny,log,msg:'Blocked REQUEST with malicious JA4 fingerprint'"

# SecRule RESPONSE_HEADERS:X-JA4 "@pmFromFile rules/ja4_blacklist.txt" \
#     "id:1003,phase:1,deny,log,msg:'Blocked RESPONSE with malicious JA4 fingerprint'"

# SecRule REQUEST_HEADERS:X-JA4 "@contains t13i020000_04659ec43a24_000000000000" "id:1002,phase:1,deny,status:403,msg:'Blocked RESPONSE with malicious JA4 fingerprint'"
# SecRule REQUEST_HEADERS:X-JA4 "@contains t13i020000_04659ec43a24_000000000000f" "id:1003,phase:1,deny,status:403,msg:'Blocked RESPONSE with malicious JA4 fingerprint'"

SecRule REQUEST_HEADERS:X-JA4 "@pmFromFile ja4+_blacklist.txt" \
    "id:1002,phase:1,deny,status:403,msg:'Blocked REQUEST with malicious JA4 fingerprint'"

SecRule RESPONSE_HEADERS:X-JA4 "@pmFromFile ja4+_blacklist.txt" \
    "id:1003,phase:1,deny,status:403,msg:'Blocked RESPONSE with malicious JA4 fingerprint'"


# Added Rules
# ------------------------------------------------------------------------
# [MFA Bypass] Detect suspicious 2FA code values (000000 or null)
# These are often accepted due to weak backend validation.
# ------------------------------------------------------------------------
SecRule REQUEST_URI "@contains /2fa/verify" \
    "id:210001,phase:2,t:none,log,deny,status:403, \
    msg:'MFA Bypass attempt: suspicious 2FA code (000000 or null)', \
    tag:'application-mfa',tag:'bypass-attempt', \
    chain"
    SecRule REQUEST_BODY "@rx \"otp\"\\s*:\\s*\\\"?(000000|null)\\\"?" 
#commands Injections
#-----------------------------------------------------------------

SecRule ARGS|REQUEST_URI "@rx [;|&`]+\\s*(id|ls|netstat|cat)(\\b|\\s|;|\\||\\n|$)" \
    "id:933011200,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalizePath,t:removeNulls,\
    msg:'Command Injection: Detected use of id/ls/netstat/cat with injection characters',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    severity:'CRITICAL',\
    tag:'attack-command-injection',\
    tag:'application-multi',\
    tag:'paranoia-level/1',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx `\\s*(id|ls|cat|netstat|/usr/bin/id)\\s*`" \
    "id:933011201,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalizePath,t:removeNulls,\
    msg:'Command Injection: Backtick execution of command',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    severity:'CRITICAL',\
    tag:'attack-command-injection',\
    tag:'application-multi',\
    tag:'paranoia-level/1',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx (\\n|%0a)\\s*(id|ls|cat|netstat|/usr/bin/id)\\s*(\\n|%0a)?" \
    "id:933011202,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalizePath,t:removeNulls,\
    msg:'Command Injection: Command preceded or followed by newline',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    severity:'CRITICAL',\
    tag:'attack-command-injection',\
    tag:'application-multi',\
    tag:'paranoia-level/1',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx <\!--#exec\\s+cmd=\\\".*(id|cat|ls|netstat).*\\\"-->" \
    "id:933011203,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalizePath,t:removeNulls,\
    msg:'Command Injection: SSI directive with command execution',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    severity:'CRITICAL',\
    tag:'attack-command-injection',\
    tag:'application-multi',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx ;\\s*system\\(\\s*['\"]?(id|ls|cat|netstat|/usr/bin/id)['\"]?\\s*\\)" \
    "id:933011204,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalizePath,t:removeNulls,\
    msg:'Command Injection: Detected system() call with command',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    severity:'CRITICAL',\
    tag:'attack-command-injection',\
    tag:'application-multi',\
    tag:'paranoia-level/2',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx <\!--#exec\s+cmd=\\\"(/bin/cat\s+/(etc/passwd|etc/shadow)|/usr/bin/id(;)?|id(;)?|netstat\s+-a(;)?).*\\\"-->" \
    "id:93301114,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,\
    msg:'Command Injection: SSI exec command detected',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'application-multi',\
    tag:'attack-command-injection',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    severity:'CRITICAL',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx ([;|`]\s*)(id|/usr/bin/id|netstat\s+-a)([;|`]|$)" \
    "id:93301115,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Command Injection: command execution via special characters (;, |, `)',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'application-multi',\
    tag:'attack-command-injection',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    severity:'CRITICAL',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx \|+(/usr/bin/)?id\|*" \
    "id:93301116,\
    phase:2,\
    block,\
    capture,\
    t:none,t:urlDecodeUni,\
    msg:'Command Injection: id or /usr/bin/id wrapped in pipes',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'application-multi',\
    tag:'attack-command-injection',\
    tag:'paranoia-level/1',\
    tag:'OWASP_CRS',\
    severity:'CRITICAL',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx (?i)([\|\&\;]\s*)(/usr/bin/)?(id|ls|cat|ping)(\b|[^a-zA-Z])" \
    "id:9330201,\
    phase:2,\
    block,\
    t:none,t:urlDecodeUni,\
    msg:'Command Injection: pipe/semicolon with common binaries (id, ls, cat, ping)',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'attack-command-injection',\
    severity:'CRITICAL',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx (?i)(%0a|\\n)(/usr/bin/)?(id|cat)([^a-zA-Z]|$)" \
    "id:9330202,\
    phase:2,\
    block,\
    t:none,t:urlDecodeUni,\
    msg:'Command Injection: encoded newline with id/cat',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'attack-command-injection',\
    severity:'CRITICAL',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"

SecRule ARGS|REQUEST_URI "@rx (?i);?\s*system\s*\(\s*['\]?(/usr/bin/)?(id|cat)[^)]*\)" \
    "id:9330203,\
    phase:2,\
    block,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,t:normalizePath,t:removeNulls,\
    msg:'Command Injection: use of system() with id or cat',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'attack-command-injection',\
    tag:'platform-unix',\
    tag:'language-bash',\
    ver:'OWASP_CRS/4.14.0-dev',\
    severity:'CRITICAL',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"


SecRule ARGS|REQUEST_URI "@rx (?i)[\&\|\;]?\s*ping\s+(-i|-n)?\s*\d+\s+127\.0\.0\.1" \
    "id:9330204,\
    phase:2,\
    block,\
    t:none,t:urlDecodeUni,\
    msg:'Command Injection: ping sleep attempt',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'attack-command-injection',\
    severity:'CRITICAL',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
SecRule ARGS|REQUEST_URI "@rx [`$][^a-zA-Z0-9]?(/usr/bin/)?(id|cat|ping)" \
    "id:9330205,\
    phase:2,\
    block,\
    t:none,t:urlDecodeUni,\
    msg:'Command Injection: backtick or dollar-execution with common binaries',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'attack-command-injection',\
    severity:'CRITICAL',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
 #-------------------------------------------
    SecRule ARGS|REQUEST_URI "@rx (?i)(?:\b|[^a-z0-9/])((?:/usr/bin/|)[id|cat])([^a-z0-9;|%27%22%0A]|$)" \
    "id:9330310,\
    phase:2,\
    block,\
    t:none,t:urlDecodeUni,t:htmlEntityDecode,\
    msg:'Command Injection: Execution of id, cat, or malicious commands with delimiters or encoding',\
    logdata:'Matched: %{TX.0} in %{MATCHED_VAR_NAME}',\
    tag:'attack-command-injection',\
    tag:'paranoia-level/2',\
    severity:'CRITICAL',\
    ver:'OWASP_CRS/4.14.0-dev',\
    setvar:'tx.inbound_anomaly_score_pl2=+%{tx.critical_anomaly_score}'"
    #------------
    #------------
    #-----------
#----------------------------------------------------
# #Rule for Hidden Parameter Detection
SecRule ARGS_NAMES|ARGS "@rx ^(?i:(debug|test|config|env|hidden|bypass|stage|internal|dev|beta|is_admin|is_root|enable|superuser|__.*))$" \
    "chain,\
    id:9411999,\
    phase:2,\
    block,\
    t:none,\
    msg:'Hidden or Suspicious Parameter with Dangerous Value Detected',\
    logdata:'Parameter %{MATCHED_VAR_NAME} = %{MATCHED_VAR}',\
    tag:'hidden-parameter',\
    tag:'privilege-escalation',\
    tag:'attack-probing',\
    severity:'CRITICAL',\
    ver:'OWASP_CRS/Coraza-custom',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
    SecRule MATCHED_VAR "@rx ^(?i:(1|true|yes|enable|on))$" "t:none"
#--------------------------------------------------
#MongoDB and NoSql
# Enhanced MongoDB/NoSQL Injection Rule
SecRule ARGS|REQUEST_BODY "@rx (?i)([`\"']?\$where[`\"']?\s*:\s*[`\"']?1\s*==\s*1[`\"']?|[:=]\s*1\s*==\s*1|[`\"']?\$ne[`\"']?\s*:\s*1|[`\"']?\$gt[`\"']?\s*:\s*[`\"']?|[`\"']?\$lt[`\"']?\s*:\s*[`\"']?|[,;]\s*\$or\s*:\s*\[.*?\]|this\.password(?:zz)?\.match\s*\(.*?\)|mapReduce\s*\(function\s*\(|sleep\(\d+\)|0;\s*return\s*true|return\s*['\"`]?a['\"`]?==['\"`]?a|db\.(?:injection|stores)\.(?:insert|mapReduce)|\[\$ne\]=1|%00|%20&&%20.*password.*match)" \
    "id:9413210,\
    phase:2,\
    block,\
    t:none,t:urlDecode,t:urlDecodeUni,t:lowercase,\
    msg:'MongoDB/NoSQL Injection Detected (Improved)',\
    logdata:'Matched Payload: %{TX.0}',\
    severity:'2',\
    tag:'application-nosql',\
    tag:'attack-nosql-injection',\
    tag:'coraza-custom',\
    ver:'OWASP_CRS/MongoDB-Injection-Plus',\
    setvar:'tx.inbound_anomaly_score_pl1=+%{tx.critical_anomaly_score}'"
    #
    #for the last 16 payloads that prevous rule don't catch them
    #


# Rule name: Abnormal character encoding requests
# Threat level: High
# Description: Hackers typically use an exception charset in the Content Type header to define character set encoding to bypass WAF protection, such as IBM037, IBM500, cp875, etc

SecRule REQUEST_HEADERS:Content-Type "!@rx charset\s*=\s*(utf-8|gbk|gb2312|iso-8859-1|iso-8859-15|windows-1252)" \
    "id:100001,phase:1,block,log,msg:'Abnormal charset in Content-Type header',severity:'2'"

# Rule name: ASP malformed encoding filtering
# Threat level: Critical
# Description: Abnormal encoding of Unicode in ASP can cause WAF bypass hazards.

SecRule REQUEST_URI "@rx %u00(?:aa|ba|d0|de|e2|f0|fe)" \
    "id:100007,phase:1,block,log,msg:'Abnormal Unicode encoding detected in ASP',severity:CRITICAL"